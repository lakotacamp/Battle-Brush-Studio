// import React, { useRef, useState } from 'react';
// import { Canvas, useThree } from '@react-three/fiber';
// import { useGLTF } from '@react-three/drei';
// import * as THREE from 'three';
// import { OrbitControls } from '@react-three/drei';

// const ShoeCanvas = () => {
//   return (
//     <>
//       <Canvas style={{ position: 'relative' }}>
//         <ambientLight />
//         <pointLight position={[10, 10, 10]} />
//         <OrbitControls />
//         <Shoe />
//       </Canvas>
//       <MaterialColorPickerOverlay />
//     </>
//   );
// };

// const MaterialColorPickerOverlay = () => {
//   const { scene } = useGLTF('/scene.gltf');
//   const [materialColors, setMaterialColors] = useState({});
//   const meshRefs = useRef({});

//   const handleColorChange = (materialName, color) => {
//     setMaterialColors({ ...materialColors, [materialName]: color });

//     if (meshRefs.current[materialName]) {
//       meshRefs.current[materialName].material.color.set(color);
//     }
//   };

//   scene.traverse((child) => {
//     if (child.isMesh && child.material.name) {
//       if (!(child.material.name in materialColors)) {
//         setMaterialColors((prevColors) => ({
//           ...prevColors,
//           [child.material.name]: '#ff0000',
//         }));
//       }
//       meshRefs.current[child.material.name] = child;
//     }
//   });

//   return (
//     <div style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%', pointerEvents: 'none' }}>
//       <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: '10px', maxHeight: '300px', overflowY: 'auto', pointerEvents: 'auto' }}>
//         {Object.entries(materialColors).map(([materialName, color]) => (
//           <div key={materialName}>
//             <label htmlFor={materialName}>{materialName}:</label>
//             <input
//               id={materialName}
//               type="color"
//               value={color}
//               onChange={(event) => handleColorChange(materialName, event.target.value)}
//             />
//           </div>
//         ))}
//       </div>
//     </div>
//   );
// };

// const Shoe = () => {
//   const { nodes } = useGLTF('/scene.gltf');
//   const shoeRef = useRef();
//   const { camera } = useThree();

//   const handlePointerDown = (event) => {
//     const raycaster = new THREE.Raycaster();
//     const mouse = new THREE.Vector2();

//     mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
//     mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

//     raycaster.setFromCamera(mouse, camera);

//     const intersects = raycaster.intersectObject(shoeRef.current, true);
//     if (intersects.length > 0) {
//       const mesh = intersects[0].object;
//       const materialName = mesh.material.name;
//       const colorPicker = document.getElementById(materialName);
//       colorPicker.click(); // Open color picker for the clicked material
//     }
//   };

//   // const handlePointerOver = (event) => {
//   //   const raycaster = new THREE.Raycaster();
//   //   const mouse = new THREE.Vector2();

//   //   mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
//   //   mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

//   //   raycaster.setFromCamera(mouse, camera);

//   //   const intersects = raycaster.intersectObject(shoeRef.current, true);
//   //   if (intersects.length > 0) {
//   //     const mesh = intersects[0].object;
//   //     const color = mesh.material.color;
//   //     const lightenedColor = new THREE.Color().lerpColors(color, new THREE.Color('white'), 0.0001);
//   //     mesh.material.emissive.copy(lightenedColor);
//   //   }
//   // };

//   // const handlePointerOut = () => {
//   //   shoeRef.current.traverse((child) => {
//   //     if (child.isMesh) {
//   //       child.material.emissive.set(0);
//   //     }
//   //   });
//   // };

//   return (
//     <group ref={shoeRef}>
//       {nodes.Shoe.children.map((child, index) => (
//         <mesh
//           key={index}
//           geometry={child.geometry}
//           material={child.material}
//           onClick={handlePointerDown}
//         />
//       ))}
//     </group>
//   );
// };

// export default ShoeCanvas;